package gui

import (
	"path/filepath"
	"net/url"
	"fmt"
	"encoding/json"
	"time"
	"strings"
	"fyne.io/fyne/v2"
	//"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/widget"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/data/binding"
	"github.com/globaldce/globaldce-gateway/mainchain"
	"github.com/globaldce/globaldce-gateway/daemon"
	"github.com/globaldce/globaldce-gateway/utility"
)

//////////////////////////////////////////////////
//////////////////////////////////////////////////
func parseURL(urlStr string) *url.URL {
	link, err := url.Parse(urlStr)
	if err != nil {
		fyne.LogError("Could not parse URL", err)
	}

	return link
}
/*
func banPostName(name string) func() {
	return func() {
		if name!=""{
			//fmt.Println("post",p)
			daemon.Usersettings.BannedNameArray=append(daemon.Usersettings.BannedNameArray,name)
			daemon.Mn.BannedNameArray=append(daemon.Mn.BannedNameArray,name)
		}
	}
}
*/
func displayPostDetails(p *post) func() {
	return func() {
		if p!=nil{
			//fmt.Println("post",p)
			win := guiApp.NewWindow("Public post details")
			postdetailsCanvas := win.Canvas()
			
			txtContent:=widget.NewLabel(p.Content)
			txtContent.Wrapping=fyne.TextWrapBreak	
			//txtContentContainer:= container.New(  layout.NewGridWrapLayout(fyne.NewSize(800, 600)),txtContent)
			postdetailscontainer:=container.NewVBox()

			//postdetailscontainer := container.New(layout.NewGridWrapLayout(fyne.NewSize(50, 50)),txtContent)
			postdetailscontainer.Add(txtContent)
			for j:=0;j<len(p.AttachmentHashArray);j++{
				i:=canvas.NewImageFromFile(DataFilePathFromHash(p.AttachmentHashArray[j]))
				i.FillMode = canvas.ImageFillContain
				i.SetMinSize(fyne.Size{500, 500})
				postdetailscontainer.Add(i)
			}

			
			//win.SetContent(widget.NewLabel(p.Content))
			postdetailsScroll := container.NewScroll(postdetailscontainer)
			//myCanvas.SetContent(container.NewVBox(i,i2))
			//postdetailsContainer:= container.New(  layout.NewGridWrapLayout(fyne.NewSize(800, 600)),postdetailsScroll)
			//postdetailsContainer:=container.New(layout.NewHBoxLayout(), layout.NewSpacer(), postdetailsScroll, layout.NewSpacer())
			postdetailsCanvas.SetContent(postdetailsScroll)
			win.Resize(fyne.NewSize(800, 600))
			win.Show()

		}
	}
}



const iconSize = float32(150)
type post struct {
	Name string
	Link string
	Content string
	AttachmentSizeArray []int
	AttachmentHashArray []utility.Hash
	//user    *user
}

func PostInfoFromString(s string) mainchain.PostInfo{
	var p mainchain.PostInfo
	json.Unmarshal([]byte(s), &p)
	return p
}
func DataFilePathFromHash(h utility.Hash) string{
	var s string//
	s=filepath.Join("Data","DataFiles",fmt.Sprintf("%x",h))
	//s="./Data/DataFiles/77d730d337fdb932c267d602343c0f2cb271c3572a5a4fd91f083cf66aae83a6"
	return s
}

type postRenderer struct {
	pc *postCell
	top, main *widget.Label
	pic *canvas.Image
	link *widget.Hyperlink
	details *widget.Button
	ban *widget.Button
	//sep *widget.Separator
}
func (pr *postRenderer) Destroy() {
}
func (pr *postRenderer) Layout(s fyne.Size) {
	remainWidth := s.Width - iconSize - theme.Padding()*2
	remainStart := iconSize + theme.Padding()*2
	
	pr.pic.Move(fyne.NewPos(theme.Padding(), theme.Padding()))
	pr.pic.Resize(fyne.NewSize(iconSize, iconSize))
	pr.details.Move(fyne.NewPos(theme.Padding(), theme.Padding()+iconSize))
	pr.details.Resize(fyne.NewSize(iconSize, 30))
	pr.ban.Move(fyne.NewPos(appscreenWidth-theme.Padding()-200, theme.Padding()))
	pr.ban.Resize(fyne.NewSize(iconSize, 30))
	pr.top.Move(fyne.NewPos(remainStart, -theme.Padding()))
	pr.top.Resize(fyne.NewSize(remainWidth, pr.top.MinSize().Height))

	pr.link.Move(fyne.NewPos(remainStart, pr.top.MinSize().Height-theme.Padding()*4))//100 is the height of the cell
	if pr.pc.p.Link!=""{
		pr.link.Resize(fyne.NewSize(remainWidth, pr.top.MinSize().Height))
	}
	

	pr.main.Move(fyne.NewPos(remainStart, pr.top.MinSize().Height+2*theme.Padding()))
	pr.main.Resize(fyne.NewSize(remainWidth, pr.main.MinSize().Height))
	
	//pr.sep.Move(fyne.NewPos(0, s.Height-theme.SeparatorThicknessSize()))
	//pr.sep.Resize(fyne.NewSize(s.Width, theme.SeparatorThicknessSize()))
}
func (pr *postRenderer) MinSize() fyne.Size {

	return fyne.NewSize(appscreenWidth,200)
}
func (pr *postRenderer) Objects() []fyne.CanvasObject {
	return []fyne.CanvasObject{pr.top, pr.main, pr.pic,pr.link,pr.details,pr.ban}//,pr.sep}
}

func (pr *postRenderer) Refresh() {
	pr.top.SetText(pr.pc.p.Name)

	pr.main.SetText(MaxCharDisplay(pr.pc.p.Content))
	
	
	///////////////////////////////////

	go func() {
		//pr.link=widget.NewHyperlink(pr.pc.p.Link, parseURL(pr.pc.p.Link))
		pr.link.SetURLFromString(pr.pc.p.Link)
		//pr.details= widget.NewButton("Details", displayPostDetails(pr.pc.p))
		pr.details.OnTapped=displayPostDetails(pr.pc.p)
		//pr.ban= widget.NewButton("Ban", banPostName(pr.pc.p.Name))
		pr.ban.OnTapped=banPostName(pr.pc.p.Name)
		if pr.pc.p.AttachmentHashArray!=nil{
			//pr.pic=canvas.NewImageFromFile(DataFilePathFromHash(pr.pc.p.AttachmentHashArray[0]))
			pr.pic.File=DataFilePathFromHash(pr.pc.p.AttachmentHashArray[0])
		} else {
			//pr.pic=canvas.NewImageFromFile("blank.png")
			pr.pic.File="blank.png"
		}
		pr.pic.Refresh()
	}()
	///////////////////////////////////

	
}
type postCell struct {
	widget.BaseWidget
	p *post
}

func (pc *postCell) CreateRenderer() fyne.WidgetRenderer {
	name := widget.NewLabelWithStyle(pc.p.Name, fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	name.Wrapping = fyne.TextTruncate
	body := widget.NewLabel(pc.p.Content)
	body.Wrapping = fyne.TextWrapWord
	emptydetailsbutton:=widget.NewButton("Details", displayPostDetails(nil))
	emptybanbutton:=widget.NewButton("Ban", banPostName(""))
	emptylink:=widget.NewHyperlink(pc.p.Link, parseURL(pc.p.Link))
	return &postRenderer{pc: pc,
		top:  name,//canvas.NewImageFromFile("./rawtest/unnamed.jpg")
		//main: body, pic: widget.NewIcon(nil),link:emptylink, sep: widget.NewSeparator()}
		main: body, 
		pic:canvas.NewImageFromFile("blank.png"),
		link:emptylink,
		details:emptydetailsbutton,
		ban:emptybanbutton, 
		//sep: widget.NewSeparator(),
	}
}

func (pc *postCell) UpdatePost(s string)  {
	//m.Unbind()
	up:=PostInfoFromString(s)
	pc.p.Name=up.Name
	pc.p.Link=up.Link
	pc.p.Content=up.Content
	pc.p.AttachmentSizeArray=up.AttachmentSizeArray
	pc.p.AttachmentHashArray=up.AttachmentHashArray

}
func newPostCell(np *post) *postCell {
	ret := &postCell{p: np}
	ret.ExtendBaseWidget(ret)
	return ret
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////

var MaxDisplayedPost =5
var searchtext string =""
var ListRefreshNeeded bool =true
//var ListRefreshTime time.Duration =3* time.Second
func exploreScreen(w fyne.Window)  fyne.CanvasObject{
	bindings := binding.BindStringList(
		&[]string{},
	)

	


list := widget.NewTable(
  func() (int, int) {
    //return len(bindings), 1
	l,_:=bindings.Get()
	return len(l), 1
  },
  func() fyne.CanvasObject {
    //return widget.NewLabel("wide Content")
	//m2:=&post{Content:""}
	m2:=&post{}
	return newPostCell(m2)
  },
  func(i widget.TableCellID, o fyne.CanvasObject) {
    //title, _ := (bindings)[i.Row].GetItem("Name")

    //log.Println(title)
    //o.(*widget.Label).Bind(title.(binding.String))
	///////////////////////////////////////////////
	//o.(*postCell.Label).Bind(title.(binding.String))
	//_=title
	//o.(*postCell).Cool("xxxx")

	bs,_:=bindings.GetValue(i.Row)
	o.(*postCell).UpdatePost(bs)
	//fmt.Printf("*********************bs",bs)
	o.(*postCell).Refresh()
	if (i.Row==MaxDisplayedPost-1) && (i.Col==0){
		fmt.Printf("More ************************\n")
		MaxDisplayedPost+=10
		ListRefreshNeeded=true
	}
	//////////////////////////////////////
  })


/*
go func() {
	for {
		//fmt.Println("*******!!!!!!!!",registerednames)
		time.Sleep(time.Second * 3)
		//assestsdestails.Set(daemon.Wlt.GetAssetsDetails())
		bindings.Set(getPosts(searchtext))
		list.Refresh()//
		//time.Sleep(time.Second * 10)
		//str.Set(fmt.Sprintf("WALLET BALANCE is %d", daemon.Wlt.ComputeBalance()))
		
	}
}()
*/

go func(){
	for {
		//time.Sleep(ListRefreshTime)
		time.Sleep(time.Second * 3)
		if ListRefreshNeeded{
			bindings.Set(getPosts(searchtext))
			list.Refresh()
			ListRefreshNeeded=false
			//ListRefreshTime=3*time.Second
			//time.Sleep(time.Second * 10)
		}
		
	}
}()
	
	
	searchentry:=widget.NewEntry()
	searchentry.SetPlaceHolder("Seach for ...")
	searchentry.OnSubmitted=func(s string) {
		fmt.Println("Search submitted",s)
		searchtext=s
		bindings.Set(getPosts(s))
		list.Refresh()
	}
	/*
	searchentry.ActionItem = widget.NewButtonWithIcon("  ", theme.SearchIcon(), func() {
		searchtext=searchentry.Text
		fmt.Println("Search submitted",searchtext)
		bindings.Set(getPosts(searchtext))
		list.Refresh()
	})
	*/
	
	//widget.NewIcon(theme.SearchIcon())
	searchButton:= widget.NewButtonWithIcon("",theme.SearchIcon(), func() {
		
		searchtext=searchentry.Text
		fmt.Println("Search submitted",searchtext)
		bindings.Set(getPosts(searchtext))
		list.Refresh()
	})
	searchButtonContainer:=container.New(  layout.NewGridWrapLayout(fyne.NewSize(40, 40)),searchButton)
	searchentryContainer:=container.New(  layout.NewGridWrapLayout(fyne.NewSize(appscreenWidth, 40)),searchentry)
	searchcontainer:=container.NewHBox(searchentryContainer,searchButtonContainer)
	
	
	
	//return container.NewBorder(searchcontainer, nil, nil, nil,list)
	//pagecontainer:=container.NewVBox(searchcontainer,list)
	//  listScroll := container.NewScroll(list)
	//////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////
	//TODO if Table.Scroll will be exposed use it
	//listScroll.OnScrolled= func(offset fyne.Position) {
	//			  fmt.Printf("*******************Scrollled %f\n",offset.Y)
	//  }		
	/*
	//Until have acces to Table.Scroll 
	morepostsButton:= widget.NewButton("More", func() {
		//fmt.Printf("more*******************\n")
		MaxDisplayedPost+=10
		bindings.Set(getPosts(searchtext))
		list.Refresh()//
	})
	morepostsButtonContainer:=container.New(  layout.NewGridWrapLayout(fyne.NewSize(100, 40)),morepostsButton)
	*/
	///////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////
	//exploreContainer:= container.NewBorder(searchcontainer,morepostsButtonContainer, layout.NewSpacer(), layout.NewSpacer(),list)
	exploreContainer:= container.NewBorder(searchcontainer,nil, nil, nil,list)
	return container.New(layout.NewHBoxLayout(), layout.NewSpacer(), exploreContainer, layout.NewSpacer())//exploreContainer
	//centered := container.New(layout.NewHBoxLayout(), layout.NewSpacer(), pagecontainer, layout.NewSpacer())
	//return centered
}

func getPosts(keywords string)[]string{
	_=keywords
	//GetPostInfoStringArray []string
	/*
	var sarray []string
	
	s1:=mainchain.StringFromPostInfo(mainchain.PostInfo{Name:"cool1",Link:"",Content:"11111cool1 content text"})
	//if strings.Index(s1,keywords)>=0{
		sarray=append(sarray,s1)
	//}
	s2:=mainchain.StringFromPostInfo(mainchain.PostInfo{Name:"cool2",Link:"https://www.google.com",Content:"cool2222 content text"})
	//if strings.Index(s2,keywords)>=0{
		sarray=append(sarray,s2)
	//}
	
	sarray=append(sarray,mainchain.StringFromPostInfo(mainchain.PostInfo{Name:"cool33",Link:"",Content:"cool33 content text"}))
	//bindings.Set(sarray)
	return sarray
	*/
	var sarray []string
	if daemon.Mn==nil{
		return sarray
	}
	sarray=daemon.Mn.GetPostInfoStringArray(keywords,MaxDisplayedPost) 
	//fmt.Printf("********%v",sarray)
	return sarray
	
	//return nil
}
/*
func MaxLineDisplay(s string) string{
	as:=strings.Split(s,"\n")
	tl:=0
	maxl:=5
	maxtl:=500
	if len(as)<maxl{
		maxl=len(as)
	}
	for i:=0;i<maxl;i++{
		tl+=len(as[i])
	}
	if tl>maxtl{
		tl=maxtl
	}
	ns:=s[:tl]
	if len(ns)<len(s){
		return ns+" ..."
	} else {
		return ns
	}
	
}
*/
func MaxCharDisplay(s string) string{
	as:=strings.Split(s,"\n")
	tl:=0
	maxl:=5
	maxtl:=500
	if len(as)<maxl{
		maxl=len(as)
	}
	for i:=0;i<maxl;i++{
		tl+=len(as[i])
	}
	if tl>maxtl{
		tl=maxtl
	}
	ns:=s[:tl]
	if len(ns)<len(s){
		return ns+" ..."
	} else {
		return ns
	}
	
}